---
/*
 * Copyright (c) Cynthia Rey et al., All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import type { CollectionEntry } from 'astro:content'

import slashSvg from 'feather-icons/dist/icons/slash.svg?raw'

const DecorationElements = import.meta.glob('../assets/decorations/*.svg', { query: '?raw' })

export interface Props {
	decoration: CollectionEntry<'decorations'> | null
	background?: string
}

const { decoration, background } = Astro.props

const topLeft = decoration?.data.elements?.top_left
const bottomRight = decoration?.data.elements?.bottom_right
const animationBorder = decoration?.data.animation?.border
const animationTopLeft = decoration?.data.animation?.top_left
const animationBottomRight = decoration?.data.animation?.bottom_right

type ColorDef = { c: string, o: string }
function definitionToColor (def: ColorDef[]) {
	return def.map(({ c, o }) => `${c} ${o}`).join(', ')
}

function makeStyle (def: string) {
	const bg = background ?? 'linear-gradient(currentColor, currentColor)'
	return `border-color: transparent; background: ${bg} padding-box, ${def} border-box; background-size: contain`
}

let style = ''
switch (decoration?.data.border.type) {
	case 'solid':
		style = makeStyle(decoration.data.border.color)
		break
	case 'linear-gradient': {
		let angle = decoration.data.border.angle
		if (angle === -1) angle = 45

		const gradient = definitionToColor(decoration.data.border.colors)
		style = makeStyle(`linear-gradient(${angle}deg, ${gradient})`)
		break
	}
	case 'conic-gradient': {
		let angle = decoration.data.border.angle
		if (angle === -1) angle = -45
		if (angle === -2) angle = 135

		const gradient = definitionToColor(decoration.data.border.colors)
		style = makeStyle(`conic-gradient(from ${angle}deg at 50% 50%, ${gradient})`)
		break
	}
}
---
<div class='relative w-full h-full'>
	{decoration
		? (
			<Fragment>
				<div
					class:list={[ 'w-full h-full border-8 rounded-full decoration-border', animationBorder && `animation-${animationBorder}` ]}
					style={style}
				/>
				{topLeft && (
					<div
						class:list={[
							'w-10 absolute top-[15%] left-[15%] absolute -translate-x-1/2 -translate-y-1/2 element-top',
							animationTopLeft && `animation-${animationTopLeft}`
						]}
						set:html={DecorationElements[`../assets/decorations/${topLeft}`]()}
					/>
				)}
				{bottomRight && (
					<div
						class:list={[
							'w-10 absolute bottom-[15%] right-[15%] absolute translate-x-1/2 translate-y-1/2 element-bottom',
							animationBottomRight && `animation-${animationBottomRight}`
						]}
						set:html={DecorationElements[`../assets/decorations/${bottomRight}`]()}
					/>
				)}
			</Fragment>
		)
		: <div class='text-black dark:text-white' set:html={slashSvg}/>}
</div>

<style>
	.decoration-border.animation-rotate,
	.element-top.animation-rotate :global(svg),
	.element-bottom.animation-rotate :global(svg) {
		border-color: transparent;
		animation: rotate 7s linear infinite;
	}

	@keyframes rotate {
		from { transform: rotate(0); }
		to { transform: rotate(360deg); }
	}
</style>
