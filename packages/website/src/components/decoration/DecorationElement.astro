---
/*
 * Copyright (c) Cynthia Rey et al., All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import type { CollectionEntry } from 'astro:content'
import { type DecorationData, type Decoration, renderDecoration } from '@pronoundb/pronouns/decorations'
import DecorationSvg from './DecorationSvg.astro'

import slashSvg from 'feather-icons/dist/icons/slash.svg?raw'
import '@pronoundb/pronouns/styles.css'

type DecorationMaybeString = Omit<Decoration, 'elements'> & {
	elements: {
		topLeft: Decoration['elements']['topLeft'] | string
		bottomRight: Decoration['elements']['bottomRight'] | string
	}
}

export interface Props {
	decoration: CollectionEntry<'decorations'> | null
	background?: string
}

const { decoration: decorationRaw, background } = Astro.props

const bg = background ?? 'linear-gradient(currentColor, currentColor)'
const decoration = decorationRaw
	? renderDecoration(decorationRaw.data as DecorationData) as DecorationMaybeString | null
	: null
---
<div class="relative w-full h-full">
	{decoration
		? (
			<Fragment>
				<div
					class:list={[
						'w-full h-full',
						decoration.animation.border && `pronoundb-animate-${decoration.animation.border}`,
					]}
				>
					<div
						class="w-full h-full border-8 rounded-full pronoundb-decoration-border"
						style={`border-color: transparent; background: ${bg} padding-box, ${decoration.border.color} border-box; background-size: contain`}
					/>
				</div>
				{decoration.elements.topLeft && (
					<div
						class:list={[
							'w-10 absolute top-[15%] left-[15%] absolute -translate-x-1/2 -translate-y-1/2 element-top',
							decoration.animation.topLeft && `pronoundb-animate-${decoration.animation.topLeft}`,
						]}
					>
						<DecorationSvg element={decoration.elements.topLeft}/>
					</div>
				)}
				{decoration.elements.bottomRight && (
					<div
						class:list={[
							'w-10 absolute bottom-[15%] right-[15%] absolute translate-x-1/2 translate-y-1/2 element-bottom',
							decoration.animation.bottomRight && `pronoundb-animate-${decoration.animation.bottomRight}`,
						]}
					>
						<DecorationSvg element={decoration.elements.bottomRight}/>
					</div>
				)}
			</Fragment>
		)
		:
		<div class="text-black dark:text-white" set:html={slashSvg}/>}
</div>
